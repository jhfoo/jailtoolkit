#!/usr/local/bin/python
# core modules
import os
import sys
import shutil
import re
import json
import copy
# custom modules
import lib.util as util
import lib.jailminlib as jailminlib

print (os.path.abspath(__file__))

def taskRunTemplate(opts, task):
  TaskOpts = copy.deepcopy(opts)
  TaskOpts['ValidateTemplate'] = False
  TaskOpts['JailName'] = opts['BuildConfig']['name']
  TaskOpts['TemplateName'] = task['template']
  TaskOpts['vars']['vars']['TEMPLATEROOT'] = '{}/templates/{}/'.format(opts['TemplatePath'], TaskOpts['TemplateName'])
  TaskOpts['BuildConfig'] = jailminlib.getMergedTemplate(TaskOpts)

  if (opts['DebugPath'] != None):
    OutFile = open('{}{}-BuildConfig.json'.format(TaskOpts['DebugPath'], task['template']),'w')
    OutFile.write(json.dumps(TaskOpts, indent=2))
    OutFile.close()

  # install pkgs
  BuildConfig = TaskOpts['BuildConfig']
  if 'pkgs' in BuildConfig:
    jailminlib.installPkgs(BuildConfig['name'], BuildConfig['pkgs'])

  # iterate through tasks
  if ('tasks' in BuildConfig):
    doTasks(TaskOpts)

def doTasks(opts):
  BuildConfig = opts['BuildConfig']
  vars = opts['vars']

  for task in BuildConfig['tasks']:
    print ('TASK: {}'.format(task['name']))
    if (task['do'] == 'jailexec'):
      util.execNWait('iocage exec {} "{}"'.format(BuildConfig['name'], task['cmd']))
      continue
    if (task['do'] == 'jailrestart'):
      util.execNWait('iocage restart {}'.format(BuildConfig['name']))
      continue
    if (task['do'] == 'copy'):
      jailminlib.taskCopy(vars['vars'], task, opts['WorkingPath'])
      continue
    if (task['do'] == 'runtemplate'):
      taskRunTemplate(opts, task)
      continue

def buildTemplate(opts):
  BuildConfig = opts['BuildConfig']
  vars = opts['vars']

  # all vars replaced at this point
  if (opts['DebugPath'] != None):
    OutFile = open('{}BuildConfig.json'.format(opts['DebugPath']),'w')
    OutFile.write(json.dumps(BuildConfig, indent=2))
    OutFile.close()

    OutFile = open('{}vars.json'.format(opts['DebugPath']),'w')
    OutFile.write(json.dumps(vars, indent=2))
    OutFile.close()

  # print (json.dumps(BuildConfig, indent=2))

  jailminlib.destroyIfExist(BuildConfig['name'])

  # create jail
  util.execNWait('iocage create -r {} -n {}'.format(BuildConfig['release'], BuildConfig['name']))
  jailminlib.setProps(BuildConfig)

  # start jail 
  print ('Starting {}...'.format(BuildConfig['name']))
  util.execNWait('iocage start {}'.format(BuildConfig['name']))

  # install pkgs
  if 'pkgs' in BuildConfig:
    jailminlib.installPkgs(BuildConfig['name'], BuildConfig['pkgs'])

  # iterate through tasks
  if ('tasks' in BuildConfig):
    doTasks(opts)

  # util.execNWait('iocage set template=yes {}'.format(BuildConfig['name']))

def parseOptions():
  print (len(sys.argv))
  if len(sys.argv) < 2:
    print ('Usage: jailmin [build] template [-v vars]')
    sys.exit(0)

  AppBasePath = os.path.dirname(os.path.abspath(os.path.dirname(__file__)))
  opts = {
    'TemplatePath': '/usr/local/etc/jailmin/' if (AppBasePath.startswith('/usr/local/bin/')) else os.path.abspath('./'),
    'DebugPath': '{}/'.format(os.path.abspath('./debug')),
    'WorkingPath': '{}/'.format(os.path.abspath('./temp'))
  }
  # work on a copy of argv
  args = sys.argv.copy()
  args.pop(0)

  while len(args) > 0:
    param = args.pop(0)
    if param == 'install':
      print ('WARNING: You must be root or running-as root to install to /usr/local/bin')
      shutil.copyfile(os.path.abspath(__file__), '/usr/local/bin/jailmin')
      print ('jailmin installed')
      continue
    if param == 'setprop':
      opts['cmd'] = param
      opts['TemplateName'] = args.pop(0)
      action = param
      continue
    if param == 'build':
      opts['cmd'] = param
      opts['TemplateName'] = args.pop(0)
      action = param
      continue
    if param == '-v':
      opts['VarFile'] = args.pop(0)
      continue
    if param == '-d':
      print (os.path.abspath(args.pop(0)))
      # opts['DebugPath'] = args.pop(0)
      continue
    if param == '-n':
      opts['JailName'] = args.pop(0)
      continue
    else:
      print ('ERROR: Unexpected param {}'.format(param))
      sys.exit(2)

  if 'cmd' in opts:
    opts['vars'] = jailminlib.getVars(opts)
    opts['BuildConfig'] = jailminlib.getMergedTemplate(opts)
  return opts

def execOptions(opts):
  if (opts['cmd'] == 'setprop'):
    setProps(opts['TemplateName'], opts['VarFile'])
    return
  if (opts['cmd'] == 'build'):
    print ('Building {}...'.format(opts['TemplateName']))
    buildTemplate(opts)

opts = parseOptions()
execOptions(opts)