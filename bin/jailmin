#!/usr/local/bin/python
# core modules
import os
import sys
import shutil
import json
import getpass
# public modules
import requests
import yaml
# custom modules
import lib.util as util
import lib.jailminlib as jailminlib
import lib.tasklib as tasklib

print (os.path.abspath(__file__))

def buildTemplate(opts):
  """Executes jail building"""
  BuildConfig = opts['BuildConfig']
  TemplateVars = opts['vars']

  # all vars replaced at this point
  if opts['DebugPath'] is not None:
    OutFile = open('{}BuildConfig.json'.format(opts['DebugPath']),'w')
    OutFile.write(json.dumps(BuildConfig, indent=2))
    OutFile.close()

    OutFile = open('{}vars.json'.format(opts['DebugPath']),'w')
    OutFile.write(json.dumps(TemplateVars, indent=2))
    OutFile.close()

  # print (json.dumps(BuildConfig, indent=2))

  jailminlib.destroyIfExist(BuildConfig['name'])

  # create jail
  util.execNWait('iocage create -r {} -n {}'.format(BuildConfig['release'], BuildConfig['name']))
  jailminlib.setProps(BuildConfig)

  # start jail
  print ('Starting {}...'.format(BuildConfig['name']))
  util.execNWait('iocage start {}'.format(BuildConfig['name']))

  # install pkgs
  if 'pkgs' in BuildConfig:
    jailminlib.installPkgs(BuildConfig['name'], BuildConfig['pkgs'])

  # iterate through tasks
  if 'tasks' in BuildConfig:
    tasklib.doTasks(opts)

  # util.execNWait('iocage set template=yes {}'.format(BuildConfig['name']))

def readConfig():
  FILE_APPCONFIG = '/usr/local/etc/jailmin.yaml'

  if os.path.exists(FILE_APPCONFIG):
    InFile = open(FILE_APPCONFIG)
    config = yaml.load(InFile.read(), Loader=yaml.FullLoader)
    InFile.close()
    return config
  # else
  return {}

def testGitGet(opts, fname):
  """Confirm code block necessary to GET raw GitHub private repo"""
  print (json.dumps(opts, indent=2))
  headers = {
    'Authorization': 'token {}'.format(opts['AppConfig']['github']['token']),
    'Accept': 'application/vnd.github.v3.raw'
  }
  url = 'https://raw.githubusercontent.com/{}/main/{}'.format(opts['AppConfig']['github']['RepoUrl'], fname)
  res = requests.get(url, headers=headers)
  if res.status_code == 200:
    print (res.text)
  else:
    print (res.text)

def parseOptions():
  """Processes command-line arguments"""
  print (len(sys.argv))
  if len(sys.argv) < 2:
    print ('Usage: jailmin [build] template [-v vars]')
    sys.exit(0)

  AppBasePath = os.path.dirname(os.path.abspath(os.path.dirname(__file__)))
  opts = {
    'TemplatePath': '/usr/local/etc/jailmin/' if (AppBasePath.startswith('/usr/local/bin/')) else os.path.abspath('./'),
    'DebugPath': '{}/'.format(os.path.abspath('./debug')),
    'WorkingPath': '{}/'.format(os.path.abspath('./temp')),
    'AppConfig': readConfig()
  }
  # work on a copy of argv
  args = sys.argv.copy()
  args.pop(0)

  while len(args) > 0:
    param = args.pop(0)
    if param == 'install':
      print ('WARNING: You must be root or running-as root to install to /usr/local/bin')
      shutil.copyfile(os.path.abspath(__file__), '/usr/local/bin/jailmin')
      print ('jailmin installed')
      continue
    if param == 'setprop':
      opts['cmd'] = param
      opts['TemplateName'] = args.pop(0)
      continue
    if param == 'test':
      opts['cmd'] = param
      continue
    if param == 'build':
      opts['cmd'] = param
      opts['TemplateName'] = args.pop(0)
      continue
    if param == '-i':
      opts['Ip4Addr'] = args.pop(0)
      continue
    if param == '-v':
      opts['VarFile'] = args.pop(0)
      continue
    if param == '-d':
      print (os.path.abspath(args.pop(0)))
      # opts['DebugPath'] = args.pop(0)
      continue
    if param == '-n':
      opts['JailName'] = args.pop(0)
    else:
      print ('ERROR: Unexpected param {}'.format(param))
      sys.exit(2)

  if 'cmd' in opts and opts['cmd'] != 'test':
    opts['vars'] = jailminlib.getVars(opts)
    opts['BuildConfig'] = jailminlib.getMergedTemplate(opts)
  return opts

def execOptions(opts):
  """Executes main command"""
  if opts['cmd'] == 'setprop':
    jailminlib.setProps(opts['TemplateName'])
    return
  if opts['cmd'] == 'build':
    print ('Building {}...'.format(opts['TemplateName']))
    buildTemplate(opts)
    return
  if opts['cmd'] == 'test':
    testGitGet(opts,'test.yaml')

def validateRoot():
  """Confirms process has root privileges"""
  if getpass.getuser() != 'root':
    print ('INSUFFICIENT PRIVILEGES: jailmin requires root privileges to run some commmands (eg. iocage). Run jail as root or use sudo')
    sys.exit(1)

validateRoot()
ParsedOpts = parseOptions()
execOptions(ParsedOpts)
