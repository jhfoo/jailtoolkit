#!/usr/local/bin/python
# core modules
import os
import sys
import shutil
import re
import json
# custom modules
import lib.util as util
import lib.jailminlib as jailminlib

AppBasePath = os.path.dirname(os.path.abspath(os.path.dirname(__file__)))
TemplatePath = '/usr/local/etc/jailmin/' if (AppBasePath.startswith('/usr/local/bin/')) else os.path.abspath('./')

print (os.path.abspath(__file__))

def doTask(BuildConfig, task):
  print ('TASK: {}'.format(task['name']))
  if (task['do'] == 'jailexec'):
    util.execNWait('sudo iocage exec {} "{}"'.format(BuildConfig['name'], task['cmd']))
    return

  if (task['do'] == 'copy'):
    if (task['ApplyVars'] == True):
      # apply vars to text file
      print (task['src'])
      print (task['dest'])
      return
      InFile = open(task['src'],'r')
      RawData = InFile.read()
      InFile.close()

      for key in vars.keys():
          RawData = RawData.replace('{{' + key + '}}', vars[key])

      OutFile = open(task['dest'],'w')
      OutFile.write(RawData)
      OutFile.close()
    else:
      # binary copy
      util.execNWait('sudo copy {} {}'.format(task['src'], task['dest']))
    return

def buildTemplate(BuildName, VarFile = None):
  vars = jailminlib.getVars(None if (VarFile == None) else TemplatePath + '/jails/' + VarFile + '/vars.yaml')
  BuildConfig = jailminlib.getMergedTemplate(BuildName, vars)
  # post-merge var processing
  # iterate config selectively: light pass through tasks
  DefaultVars = {
    'JAILROOT': '/zroot/iocage/jails/{}/'.format(BuildConfig['name']),
    'TEMPLATEROOT': '{}/templates/{}/'.format(TemplatePath, BuildConfig['name'])
  }

  for task in BuildConfig['tasks']:
    for key in task.keys():
      if (type(task[key]) is str):
        for VarName in re.findall('\$\$[A-Za-z]+\$\$', task[key]):
          task[key] = task[key].replace(VarName, DefaultVars[VarName[2:-2]])

  # print (json.dumps(BuildConfig, indent=2))

  jailminlib.destroyIfExist(BuildConfig['name'])

  # create jail
  util.execNWait('sudo iocage create -r {} -n {}'.format(BuildConfig['release'], BuildConfig['name']))
  jailminlib.setProps(BuildName, vars)
  jailminlib.installPkgs(BuildConfig['name'], BuildConfig['pkgs'])

  # start jail 
  print ('Starting {}...'.format(BuildConfig['name']))
  util.execNWait('sudo iocage start {}'.format(BuildConfig['name']))

  # install pkgs
  PkgStr = ' '.join(BuildConfig['pkgs'])
  print ('Installing pkgs: {}'.format(PkgStr))
  util.execNWait('sudo iocage exec {} "{}"'.format(BuildConfig['name'], 'pkg install -y {}'.format(PkgStr)))

  # iterate through tasks
  for task in BuildConfig['tasks']:
    doTask(BuildConfig, task)

  # util.execNWait('sudo iocage set template=yes {}'.format(BuildConfig['name']))

def parseOptions():
  args = sys.argv.copy()
  args.pop(0)

  action = None
  VarFile = None
  TemplateFile = None
  while len(args) > 0:
    param = args.pop(0)
    if param == 'install':
      print ('WARNING: You must be root or running-as root to install to /usr/local/bin')
      shutil.copyfile(os.path.abspath(__file__), '/usr/local/bin/jailmin')
      print ('jailmin installed')
      continue
    if param == 'setprop':
      TemplateFile = args.pop(0)
      action = param
      continue
    if param == 'build':
      TemplateFile = args.pop(0)
      action = param
      continue
    if param == '-v':
      VarFile = args.pop(0)
      continue
    else:
      print ('ERROR: Unexpected param {}'.format(param))
      sys.exit(2)

  if (action == 'setprop'):
    setProps(TemplateFile, VarFile)
  elif (action == 'build'):
    print ('Building {}...'.format(TemplateFile))
    buildTemplate(TemplateFile, VarFile)


parseOptions()
