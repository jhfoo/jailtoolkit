#!/usr/local/bin/python
# core modules
import os
import sys
import shutil
import re
# custom modules
import lib.util as util

AppBasePath = os.path.dirname(os.path.abspath(os.path.dirname(__file__)))
TemplatePath = '/usr/local/etc/jailmin/' if (AppBasePath.startswith('/usr/local/bin/')) else os.path.abspath('./')

print (os.path.abspath(__file__))

def getTemplates():
  templates = []
  ExecResult = util.execNWait('sudo iocage list -t', isPrintRealtime = False)
  if (ExecResult['ExitCode'] == 0):
    lines = ExecResult['output'].split('\n')
    if (len(lines) > 3):
      lines.pop(0)
      lines.pop(0)
      lines.pop(0)

    for line in lines:
      columns = line.split('|')
      if (len(columns) == 7):
        fields = {
          'jid': columns[1].strip(),
          'name': columns[2].strip(),
          'state': columns[3].strip(),
          'release': columns[4].strip(),
          'address': columns[5].strip(),
        }
        templates.append(fields)

  return templates

def getPropValue(value):
  if (type(value) is bool):
    return 1 if (value == True) else 0
  # if (type(value) is str):
  return value

def getJailProps(JailName):
  RawJailProps = util.execNWait('sudo iocage get all {}'.format(JailName), isPrintRealtime = False, isContinueOnError = True)
  if (RawJailProps['ExitCode'] != 0):
    # jail does not exist
    return None

  props = {}
  for line in RawJailProps['output'].split('\n'):
    columns = line.split(':')
    if (len(columns) > 1):
      props[columns[0]] = columns[1]
  return props

def setProps(YamlFile):
  BuildConfig = util.readYamlFile(TemplatePath + '/templates/' + YamlFile + '.yaml')
  props = getJailProps(BuildConfig['name'])
  if (props != None and props['state'] == 'up'):
    print ('{} is running: stopping'.format(BuildConfig['name']))
    util.execNWait('sudo iocage stop {}'.format(BuildConfig['name']))

  for key in BuildConfig['props'].keys():
    print ('{} = "{}"'.format(key, getPropValue(BuildConfig['props'][key]), BuildConfig['name']))
    util.execNWait('sudo iocage set {}="{}" {}'.format(key, getPropValue(BuildConfig['props'][key]), BuildConfig['name']))

def buildTemplate(BuildName):
  BuildConfig = util.readYamlFile(TemplatePath + '/templates/' + BuildName + '.yaml')
  print (BuildConfig)
  print (BuildConfig['props'])
  templates = getTemplates()
  # check if template exists
  temps = [temp['name'] for temp in templates if temp['name'] == BuildConfig['name']]
  if (len(temps) > 0):
    # template exists: destroy
    # print ('sudo iocage destroy {}'.format(BuildConfig['name']))
    util.execNWait('sudo iocage destroy -f {}'.format(BuildConfig['name']))
  print (temps)

  # create jail
  util.execNWait('sudo iocage create -r {} -n {}'.format(BuildConfig['release'], BuildConfig['name']))
  util.execNWait('sudo iocage set template=yes {}'.format(BuildConfig['name']))
  for key in BuildConfig['props'].keys():
    print ("{} = {}".format(key, BuildConfig['props'][key]))
    util.execNWait('sudo iocage set {}={} {}'.format(key, getPropValue(BuildConfig['props'][key]), BuildConfig['name']))


def parseOptions():
    args = sys.argv.copy()
    args.pop(0)

    while len(args) > 0:
      param = args.pop(0)
      if param == 'install':
        print ('WARNING: You must be root or running-as root to install to /usr/local/bin')
        shutil.copyfile(os.path.abspath(__file__), '/usr/local/bin/jailmin')
        print ('jailmin installed')
        continue
      if param == 'setprop':
        YamlFile = args.pop(0)
        setProps(YamlFile)
        continue
      if param == 'build':
        buildparam = args.pop(0)
        print ('Building {}...'.format(buildparam))
        buildTemplate(buildparam)
        continue
      else:
        print ('ERROR: Unexpected param {}'.format(param))
        sys.exit(2)

parseOptions()
